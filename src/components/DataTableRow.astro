---
import Color from "color"
import colorgrad from "colorgrad-js"
import type { SeasonData } from "../downloadData"
import * as util from "../util"
import { formatDate } from "../util"

interface Props {
  data: SeasonData
}

const data = Astro.props.data

function formatAiredDate(startDate: string, endDate: string) {
  return [formatDate(startDate), formatDate(endDate)]
}

const colours = ["#e67c73", "#f3a96d", "#ffd666", "#abc978", "#57bb8a"]
const gradient = colorgrad.customGradient(colours, null, "hsv")
const gradientColours = gradient.colors(20).map((c) => c.hex()) as string[]

function getColour(score: number | string | undefined | null, max: number) {
  if (!score) return undefined
  return Color(gradientColours[Math.round((Number(score) / max) * 20) - 1])
    .fade(0.2)
    .string()
}

const averageScore = util.round(
  util.avg(
    Number(data.rottenTomatoesData?.critics?.score) / 10 || null,
    data.metaCriticData?.userScore,
    data.tmdbData?.voteAverage,
  ),
  1,
)

const rtCriticColour = getColour(data.rottenTomatoesData?.critics?.score, 100)
const rtAudienceColour = getColour(
  data.rottenTomatoesData?.audience?.score,
  100,
)
const mcCriticColour = getColour(data.metaCriticData?.metaScore, 100)
const mcUserColour = getColour(data.metaCriticData?.userScore, 10)
const tmdbColour = getColour(data.tmdbData?.voteAverage, 10)
const userAverageColour = getColour(averageScore, 10)
---

<tr class="[&>td]:px-2 [&>td]:py-0 hover:bg-slate-100 text-sm/5">
  <td>{data.name}</td>
  <td>
    <abbr title={data.meta.doctorPlayedBy}>{data.meta.doctor}</abbr>
  </td>
  <td>{data.meta.showrunner}</td>
  {
    formatAiredDate(data.meta.startDate, data.meta.endDate).map((e) => (
      <td>{e}</td>
    ))
  }
  <td class="text-right" style={{ backgroundColor: rtCriticColour }}>
    {data.rottenTomatoesData?.critics?.score}
  </td>
  <td class="text-right" style={{ backgroundColor: rtAudienceColour }}>
    {data.rottenTomatoesData?.audience?.score}
  </td>
  <td class="text-right" style={{ backgroundColor: mcCriticColour }}>
    {data.metaCriticData?.metaScore}
  </td>
  <td class="text-right" style={{ backgroundColor: mcUserColour }}>
    {data.metaCriticData?.userScore}
  </td>
  <td class="text-right" style={{ backgroundColor: tmdbColour }}>
    {data.tmdbData?.voteAverage}
  </td>
  <td class="text-right" style={{ backgroundColor: userAverageColour }}>
    {averageScore}
  </td>
</tr>
