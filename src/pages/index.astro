---
import { downloadData } from "../downloadData";

const downloadedData = await downloadData();
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <body>
    {
      downloadedData.map((data) => (
        <div>
          <h1>{data.name}</h1>
          {data.rottenTomatoesData ? (
            <div>
              <p>Critic Score: {data.rottenTomatoesData.critics?.score}</p>
              <p>Audience Score: {data.rottenTomatoesData.audience?.score}</p>
            </div>
          ) : (
            <p>No data</p>
          )}
        </div>
      ))
    }
    <div id="chart"></div>
    <script>
      import type { SeasonData } from "../downloadData";
      import { AgCharts, type AgChartOptions } from "ag-charts-community";

      declare global {
        interface Window {
          setupChart(data: SeasonData[]): void;
        }
      }

      window.setupChart = (data) => {
        const options: AgChartOptions = {
          container: document.getElementById("chart"),
          title: {
            text: "Score Comparison",
          },
          data: data.map((d) => ({
            id: `${d.showName} - ${d.id}`,
            criticScore: +(d.rottenTomatoesData?.critics?.score ?? "0"),
            audienceScore: +(d.rottenTomatoesData?.audience?.score ?? "0"),
            tmdbScore: +(d.tmdbData?.voteAverage ?? "0"),
          })),
          axes: [
            {
              type: "number",
              position: "left",
              min: 0,
              max: 100,
              label: {
                formatter: function (params) {
                  return params.value + "%";
                },
              },
              keys: ["criticScore", "audienceScore"],
            },
            {
              type: "number",
              position: "right",
              min: 0,
              max: 10,
              label: {
                formatter: function (params) {
                  return params.value.toFixed(1);
                },
              },
              keys: ["tmdbScore"],
            },
            {
              type: "category",
              position: "bottom",
              label: {
                formatter: function (params) {
                  return "Season " + params.value.split(" - ")[1];
                },
              },
            },
          ],
          series: [
            {
              type: "line",
              xKey: "id",
              yKey: "criticScore",
              yName: "Critic Score",
            },
            {
              type: "line",
              xKey: "id",
              yKey: "audienceScore",
              yName: "Audience Score",
            },
            {
              type: "line",
              xKey: "id",
              yKey: "tmdbScore",
              yName: "TMDB Score",
            },
          ],
        };

        AgCharts.create(options);
      };
    </script>
    <script define:vars={{ downloadedData }}>
      document.addEventListener("DOMContentLoaded", () => {
        setupChart(downloadedData);
      });
    </script>
  </body>
</html>
